{"version":3,"sources":["components/Todoform.js","components/Todo.js","components/Todolist.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Todoform","state","text","id","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","complete","react_default","a","createElement","this","style","display","marginBottom","onChange","placeholder","flex","padding","border","type","className","onClick","borderBottomLeftRadius","borderTopLeftRadius","React","Component","Todo","textDecoration","todo","marginRight","onComplete","onDelete","Todolist","todos","addTodo","concat","toConsumableArray","console","log","handleComplete","map","objectSpread","updateDisplay","string","handleDelete","filter","_this2","displayedTodos","components_Todoform","key","background","color","length","marginLeft","Header","App","components_Header","components_Todolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23744914.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Todoform extends React.Component {\r\n  state = {\r\n    text: \"\",\r\n    id: 0\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.state.text !== \"\") {\r\n      this.props.onSubmit({\r\n        id: this.state.id + 1,\r\n        text: this.state.text,\r\n        complete: false\r\n      });\r\n      this.setState({\r\n        text: \"\",\r\n        id: this.state.id + 1\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={this.handleSubmit}\r\n        style={{\r\n          display: \"flex\",\r\n          marginBottom: \"40px\"\r\n        }}\r\n      >\r\n        <input\r\n          name={\"text\"}\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n          placeholder=\"Your task name\"\r\n          style={{\r\n            flex: \"10 1\",\r\n            padding: \"5px\",\r\n            border: \"1px solid #d4e6f1\"\r\n          }}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Add task\"\r\n          className=\"btn\"\r\n          onClick={this.handleSubmit}\r\n          style={{\r\n            flex: \"1 1\",\r\n            borderBottomLeftRadius: \"0px\",\r\n            borderTopLeftRadius: \"0px\"\r\n          }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todoform;\r\n","import React from \"react\";\r\n\r\nexport default props => (\r\n  <div className=\"todo-container\">\r\n    <label\r\n      style={{\r\n        textDecoration: props.todo.complete ? \"line-through\" : \"\",\r\n        marginRight: \"10px\"\r\n      }}\r\n    >\r\n      <input type=\"checkbox\" onClick={props.onComplete} /> {props.todo.text}\r\n    </label>\r\n    <button onClick={props.onDelete} className=\"btn\">\r\n      Delete\r\n    </button>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport Todoform from \"./Todoform\";\r\nimport Todo from \"./Todo\";\r\n\r\nclass Todolist extends React.Component {\r\n  state = {\r\n    todos: [],\r\n    display: \"all\"\r\n  };\r\n\r\n  addTodo = todo => {\r\n    this.setState({\r\n      todos: [todo, ...this.state.todos]\r\n    });\r\n    console.log(this.state.todos);\r\n  };\r\n\r\n  handleComplete = id => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            complete: !todo.complete\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      })\r\n    });\r\n  };\r\n\r\n  updateDisplay = string => {\r\n    this.setState({\r\n      display: string\r\n    });\r\n  };\r\n\r\n  handleDelete = id => {\r\n    this.setState({\r\n      todos: this.state.todos.filter(todo => todo.id !== id)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let displayedTodos = [];\r\n\r\n    if (this.state.display === \"all\") {\r\n      displayedTodos = this.state.todos;\r\n    } else if (this.state.display === \"active\") {\r\n      displayedTodos = this.state.todos.filter(todo => !todo.complete);\r\n    } else if (this.state.display === \"completed\") {\r\n      displayedTodos = this.state.todos.filter(todo => todo.complete);\r\n    }\r\n\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Todoform onSubmit={this.addTodo} />\r\n        <div className=\"todos-container\">\r\n          {displayedTodos.map(todo => (\r\n            <Todo\r\n              key={todo.id}\r\n              onComplete={() => this.handleComplete(todo.id)}\r\n              onDelete={() => this.handleDelete(todo.id)}\r\n              todo={todo}\r\n            />\r\n          ))}\r\n        </div>\r\n        <button\r\n          onClick={() => this.updateDisplay(\"all\")}\r\n          className=\"btn\"\r\n          style={{\r\n            background: this.state.display === \"all\" ? \"#2471a3\" : \"#d4e6f1\",\r\n            color: this.state.display === \"all\" ? \"white\" : \"#2471a3\"\r\n          }}\r\n        >\r\n          Show All: {this.state.todos.length}\r\n        </button>\r\n        <button\r\n          onClick={() => this.updateDisplay(\"active\")}\r\n          className=\"btn\"\r\n          style={{\r\n            marginLeft: \"10px\",\r\n            background: this.state.display === \"active\" ? \"#2471a3\" : \"#d4e6f1\",\r\n            color: this.state.display === \"active\" ? \"white\" : \"#2471a3\"\r\n          }}\r\n        >\r\n          Show Active:{\" \"}\r\n          {this.state.todos.filter(todo => todo.complete === false).length}\r\n        </button>\r\n        <button\r\n          onClick={() => this.updateDisplay(\"completed\")}\r\n          className=\"btn\"\r\n          style={{\r\n            marginLeft: \"10px\",\r\n            background:\r\n              this.state.display === \"completed\" ? \"#2471a3\" : \"#d4e6f1\",\r\n            color: this.state.display === \"completed\" ? \"white\" : \"#2471a3\"\r\n          }}\r\n        >\r\n          Show Completed:{\" \"}\r\n          {this.state.todos.filter(todo => todo.complete).length}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1> Simple To do list</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Todolist from \"./components/Todolist\";\r\nimport Header from \"./components/Header\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Todolist />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}